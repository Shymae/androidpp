//
//  MetricAffectingSpan.h
//  Androidpp
//
//  Created by Saul Howard on 1/22/14.
//  Copyright (c) 2014 MoneyDesktop. All rights reserved.
//

#ifndef __Androidpp__MetricAffectingSpan__
#define __Androidpp__MetricAffectingSpan__

#include "AndroidMacros.h"

#include "Android/text/style/UpdateLayout.h"
#include "Android/text/style/CharacterStyle.h"

#include <memory>

using namespace std;

ANDROID_BEGIN

/**
 * The classes that affect character-level text formatting in a way that
 * changes the width or height of characters extend this class.
 */
class MetricAffectingSpan : public CharacterStyle, public UpdateLayout {
    
    friend class CharacterStyle;
    
public:
    
    virtual void updateMeasureState(shared_ptr<TextPaint> p) = 0;
    
    /**
     * Returns "this" for most MetricAffectingSpans, but for
     * MetricAffectingSpans that were generated by {@link #wrap},
     * returns the underlying MetricAffectingSpan.
     */
    virtual CharacterStyle *getUnderlying() {
        return this;
    }
    
    virtual string getType() {
        return "MetricAffectingSpan";
    };
    
private:
    
    /**
     * A Passthrough MetricAffectingSpan is one that
     * passes {@link #updateDrawState} and {@link #updateMeasureState}
     * calls through to the specified MetricAffectingSpan
     * while still being a distinct object,
     * and is therefore able to be attached to the same Spannable
     * to which the specified MetricAffectingSpan is already attached.
     */
    class Passthrough;
};

class MetricAffectingSpan::Passthrough : public MetricAffectingSpan {

private:
    
    shared_ptr<MetricAffectingSpan> mStyle;
    
public:
    
    /**
     * Creates a new Passthrough of the specfied MetricAffectingSpan.
     */
    Passthrough(shared_ptr<MetricAffectingSpan> cs) {
        mStyle = cs;
    }
    
    /**
     * Passes updateDrawState through to the underlying MetricAffectingSpan.
     */
    void updateDrawState(shared_ptr<TextPaint> tp) {
        mStyle->updateDrawState(tp);
    }
    
    /**
     * Passes updateMeasureState through to the underlying MetricAffectingSpan.
     */
    void updateMeasureState(shared_ptr<TextPaint> tp) {
        mStyle->updateMeasureState(tp);
    }
    
    /**
     * Returns the MetricAffectingSpan underlying this one, or the one
     * underlying it if it too is a Passthrough.
     */
    CharacterStyle *getUnderlying() {
        return mStyle->getUnderlying();
    }
};

ANDROID_END

#endif /* defined(__Androidpp__MetricAffectingSpan__) */
